syntax = "proto3";

package events;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

// The EventService provides RPC methods to publish events.
service EventService {
    // Publishes an event to the specified channel or broadcasts it to all subscribers.
    rpc PublishEvent (PublishEventRequest) returns (stream PublishEventResponse) {
        option (google.api.http) = {
            post: "/api/v1/events"
            body: "*"
        };
    }

    rpc Subscribe(SubscribeRequest) returns (stream Event){
        option (google.api.http) = {
            get: "/api/v1/subscribe/{channel_id}"
        };
    }
}

message SubscribeRequest {
    string channel_id = 1;
}

// Request message for publishing an event.
message PublishEventRequest {
    // An optional channel to specify the target audience for the event.
    // If not provided, the event will be broadcast to all subscribers.
    optional string channel = 1;

    // The event to be published.
    Event event = 2;
}

// Response message for the PublishEvent RPC.
message PublishEventResponse {
    // The unique ID of the published event, generated by the server.
    string event_id = 1;

    // The timestamp indicating when the event was published.
    google.protobuf.Timestamp publish_time = 2;
}

// Represents an event with a unique ID and payload.
message Event {
    // The unique ID of the event.
    string id = 1;

    // The payload of the event, in string format.
    string payload = 2;
}
